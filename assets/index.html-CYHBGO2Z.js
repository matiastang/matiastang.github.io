import{_ as e,c as a,a as i,o as n}from"./app-CS9K37Kg.js";const t={};function l(p,s){return n(),a("div",null,s[0]||(s[0]=[i(`<ul><li><a href="#python">python</a><ul><li><a href="#%E8%BE%93%E5%85%A5%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E5%87%BD%E6%95%B0%E5%90%8D%E7%A7%B0">输入文件路径，函数名称</a></li><li><a href="#ospathdirname">os.path.dirname</a></li><li><a href="#ospathdirnamefile%E7%9A%84%E4%BD%BF%E7%94%A8">os.path.dirname(<strong>file</strong>)的使用</a></li><li><a href="#%E6%A8%A1%E5%9D%97%E5%BC%95%E7%94%A8">模块引用</a><ul><li><a href="#%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B7%AF%E5%BE%84">获取当前路径</a></li><li><a href="#%E8%B7%A8%E7%9B%AE%E5%BD%95%E5%BC%95%E7%94%A8">跨目录引用</a></li><li><a href="#%E5%BC%95%E7%94%A8%E6%A8%A1%E5%9D%97">引用模块</a></li><li><a href="#%E6%90%9C%E7%B4%A2%E9%A1%BA%E5%BA%8F">搜索顺序</a></li><li><a href="#python%E4%B8%AD%E7%9A%84%E5%8C%85">Python中的包</a></li><li><a href="#python2%E4%B8%ADpyc%E6%96%87%E4%BB%B6">python2中.pyc文件</a></li><li><a href="#python3%E4%B8%AD%E7%9A%84pyc%E6%96%87%E4%BB%B6">python3中的.pyc文件</a></li></ul></li><li><a href="#usrbinpython3">#!/usr/bin/python3</a></li><li><a href="#%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82">函数传参</a></li><li><a href="#%E4%BD%BF%E7%94%A8-python-%E6%89%A7%E8%A1%8C%E7%AE%A1%E9%81%93%E5%91%BD%E4%BB%A4">使用 python 执行管道命令</a></li><li><a href="#%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86">报错处理</a><ul><li><a href="#permission-denied">permission denied</a></li><li><a href="#nameerror-name--is-not-defined">NameError: name &#39;****&#39; is not defined</a></li><li><a href="#syntaxerror-non-ascii-character-xe7">SyntaxError: Non-ASCII character &#39;\\xe7&#39;</a></li></ul></li></ul></li></ul><h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>python</span></a></h1><h2 id="输入文件路径-函数名称" tabindex="-1"><a class="header-anchor" href="#输入文件路径-函数名称"><span>输入文件路径，函数名称</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>全路径文件：__file__</span></span>
<span class="line"><span>文件名：   os.path.basename(__file__)</span></span>
<span class="line"><span>函数名:    __name__</span></span>
<span class="line"><span>行号：     sys._getframe().f_lineno</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-path-dirname" tabindex="-1"><a class="header-anchor" href="#os-path-dirname"><span>os.path.dirname</span></a></h2><p>语法：os.path.dirname(path) 功能：去掉文件名，返回目录</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>print(os.path.dirname(&#39;W:\\Python_File\\juan之购物车.py&#39;))</span></span>
<span class="line"><span>#结果</span></span>
<span class="line"><span>#W:\\Python_File</span></span>
<span class="line"><span>print(os.path.dirname(&#39;W:\\Python_File&#39;))</span></span>
<span class="line"><span>#结果</span></span>
<span class="line"><span>#W:\\</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-path-dirname-file-的使用" tabindex="-1"><a class="header-anchor" href="#os-path-dirname-file-的使用"><span>os.path.dirname(<strong>file</strong>)的使用</span></a></h2><p>(1).当&quot;print os.path.dirname(<strong>file</strong>)&quot;所在脚本是以完整路径被运行的， 那么将输出该脚本所在的完整路径，比如：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>python d:/pythonSrc/test/test.py</span></span>
<span class="line"><span>那么将输出 d:/pythonSrc/test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>(2).当&quot;print os.path.dirname(<strong>file</strong>)&quot;所在脚本是以相对路径被运行的， 那么将输出空目录，比如：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>python test.py</span></span>
<span class="line"><span>那么将输出空字符串</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块引用" tabindex="-1"><a class="header-anchor" href="#模块引用"><span>模块引用</span></a></h2><p>每个以.py 结尾的thon 文件就是一个Python 模块(Module)。 一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。</p><h3 id="获取当前路径" tabindex="-1"><a class="header-anchor" href="#获取当前路径"><span>获取当前路径</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>方法一：</span></span>
<span class="line"><span>import sys,os</span></span>
<span class="line"><span>os.getcwd()#然后就可以看见结果了</span></span>
<span class="line"><span></span></span>
<span class="line"><span>方法二：</span></span>
<span class="line"><span>import os</span></span>
<span class="line"><span>os.path.dirname(os.path.realpath(&#39;__file__&#39;))#注意：添加单引号，当前python文件的上级目录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跨目录引用" tabindex="-1"><a class="header-anchor" href="#跨目录引用"><span>跨目录引用</span></a></h3><p>python本身不支持跨目录调用文件。 将父目录（需要调用文件所在目录）加入到sys.path (python的搜索模块的路径)，之后则可以添加该目录下的任何文件了。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>import sys,os</span></span>
<span class="line"><span>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  # __file__获取执行文件相对路径，整行为取上一级的上一级目录</span></span>
<span class="line"><span>sys.path.append(BASE_DIR)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引用模块" tabindex="-1"><a class="header-anchor" href="#引用模块"><span>引用模块</span></a></h3><p>python2和python3区别比较大。 查看python_import中的c.py文件，了解更多。</p><ul><li>import 语句</li></ul><p>模块定义好后，我们可以使用 import 语句来引入模块，语法如下：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>import module1[, module2[,... moduleN]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>from…import 语句</li></ul><p>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>from modname import name1[, name2[, ... nameN]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>from…import* 语句</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>from modname import *</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="搜索顺序" tabindex="-1"><a class="header-anchor" href="#搜索顺序"><span>搜索顺序</span></a></h3><p>当你导入一个模块，Python 解析器对模块位置的搜索顺序是：</p><p>1、当前目录 2、如果不在当前目录，Python 则搜索在 shell 变量 <code>PYTHONPATH</code> 下的每个目录。 3、如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为<code>/usr/local/lib/python/</code>。 模块搜索路径存储在 \`\`system<code>模块的</code>sys.path<code> 变量中。变量里包含当前目录，</code>PYTHONPATH\`和由安装过程决定的默认目录。</p><h3 id="python中的包" tabindex="-1"><a class="header-anchor" href="#python中的包"><span>Python中的包</span></a></h3><p>包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。 简单来说，包就是文件夹，但该文件夹下必须存在 <code>__init__.py</code> 文件, 该文件的内容可以为空。<code>__init__.py</code> 用于标识当前文件夹是一个包。</p><h3 id="python2中-pyc文件" tabindex="-1"><a class="header-anchor" href="#python2中-pyc文件"><span>python2中.pyc文件</span></a></h3><p>在上述的各种自定义模块调用的操作后，如果回到之前新建的目录再多看一眼，相信不难发现，多出了几个.pyc文件，比如上面的b1.pyc、<strong>init</strong>.pyc，为什么会生成这些pyc文件，pyc文件又是有什么作用呢，我查阅了点资料在此说一下我的理解。 首先，来看一下python的运行和编译机制的几个步骤： python运行自然要依赖解释器，解释器会将python源码转换为字节码，然后再执行转换好的字节码。 那么当我们在引入调用一些模块时…… 模块加载的过程中，源码就被虚拟机（解释器）翻译成了PyCodeObject对象（也就是字节码） 将PyCodeObject写入了CPU，下次运行将直接从内存中进行读取指令并执行程序 执行结束后，根据执行的方式决定是否将执行的结果写回硬盘，也就是复制到.pyc文件中 当再次执行时，先检查是否有.pyc文件，有的话，再检查字节码文件与自身的修改时间是否一致，一致则直接运行.pyc文件，不一致或是没有字节码文件则从新执行前面三个 步骤。 所以，我们前面调用过的模块都有生成一个.pyc文件。 从上面的步骤进行分析，就可以看出.pyc文件相对与.py文件来说，由于是执行过并写入内存空间的，所以加载速度会比.py文件要快，可以加速程序的运行。 当然了，由于执行起来.pyc和.py是一样的，.py是直接以源码的形式进行呈现，而.pyc只是字节码文件，在某种程度上来说，还可以防止代码被偷看，具有一定的隐藏效果……</p><h3 id="python3中的-pyc文件" tabindex="-1"><a class="header-anchor" href="#python3中的-pyc文件"><span>python3中的.pyc文件</span></a></h3><p>python3中的.pyc文件在__pycache__文件夹中。</p><p>pyc是编译py之后生成的本地文件。一般当我们想发布系统的时候不想让别人看到源代码，所以要提前生成pyc文件。 现今网上有很多介绍如何生成pyc的文章，但是在python3之后发现其生产pycache目录下，而不是与源文件同一目录。 那么如何让python3实现生成的pyc与源代码在同一目录呢，使用<code>python3 -m compileall -b .</code></p><ol><li>生产pyc文件: python3 -m compileall -b .</li><li>删除py文件: find . -name “*.py” |xargs rm -rf</li><li>删除pycache目录: find . -name “pycache” |xargs rm -rf</li></ol><h2 id="usr-bin-python3" tabindex="-1"><a class="header-anchor" href="#usr-bin-python3"><span>#!/usr/bin/python3</span></a></h2><p><code>#!/usr/bin/python3</code>这种写法在unix系统中表示这个脚本文件的默认启动程序，通常写在第一行，其中 <code>/usr/bin/python3</code> 是那个程序的路径(命令行输入<code>where python</code>,<code>where python3</code>可以查看<code>python</code>的安装位置)，<code>#</code> 符号在 <code>shell</code>、<code>python</code> 中均为注释的标志，将类似于 <code>#!/bin/bash</code> 的一行注释写在脚本文件的第一行，可以使脚本的使用更加方便。</p><p><code>python</code>运行环境，如下也可以查看安装位置：</p><div class="language-py line-numbers-mode" data-ext="py" data-title="py"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-py line-numbers-mode" data-ext="py" data-title="py"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">():</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello, world!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __name__</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">__main__</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要如下执行：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>python3 main.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果添加了<code>#!/usr/bin/python3</code>:</p><div class="language-py line-numbers-mode" data-ext="py" data-title="py"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#!/usr/bin/python3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">():</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello, world!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __name__</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">__main__</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行时便可以当作普通<code>shell</code>脚本那样运行(<strong>注意</strong>需要有运行权限)：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>./main.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="函数传参" tabindex="-1"><a class="header-anchor" href="#函数传参"><span>函数传参</span></a></h2><p>python3.5开始可以给参数指定类型，之前版本不能</p><p>python中函数传递参数有四种形式：</p><ol><li>fun1(a,b,c)是直接将实参赋予行参，根据位置做匹配，即严格要求实参的数量与行参的数量位置相等，比较一般，大多数语言常用这种方式。</li><li>fun2(a=1,b=2,c=3)根据键值对的形式做实参与行参的匹配，通过这种式就可以忽略了参数的位置关系，直接根据关键字来进行赋值，同时该种传参方式还有个好处就是可以在调用函数的时候作为个别选填项，不要求数量上的相等，即可以fun5(3,4)来调用fun2函数，这里关键就是前面的3,4覆盖了原来a、b两个行参的值，但c还是不变采用原来的默认值3，这种模式相较第一种更加灵活，不仅可以通过fun6(c=5,a=2,b=7)来打乱行参的位置，而且可以在但没有对应行参传递的时候常用定义函数时的默认值。</li><li>fun3(*args)，这传参方式是可以传入任意个参数，这些若干参数都被放到了tuple元组中赋值给行参args，之后要在函数中使用这些行参，直接操作args这个tuple元组就可以了，这样的好处是在参数的数量上没有了限制，但是因为是tuple，其本身还是有次序的，这就仍然存在一定的束缚，在对参数操作上也会有一些不便</li><li>fun4(**kargs)最为灵活，其是以键值对字典的形式向函数传参，含有第二种位置的灵活的同时具有第三种方式的数量上的无限制。此外第三四种函数声明的方式前的’*’,与c里面的指针声明一样，这里仅做声明标识之用</li></ol><p>四种传递方式混合使用，fun7(a,b,*c,**d)，但四种方式混用时要遵守：</p><ul><li>args = 须在args之后</li><li>*args须在args=value之后</li><li>**kargs须在*args之后</li></ul><p>赋值过程为：</p><ol><li>按顺序把传给args的实参赋值给对应的行参</li><li>args = value 形式的实参赋值给行参</li><li>将多余出的即键值对行后的零散实参打包组成一个tuple传递给*args</li><li>将多余的key=value形式的实参打包正一个dicrionary传递给**kargs</li></ol><h2 id="使用-python-执行管道命令" tabindex="-1"><a class="header-anchor" href="#使用-python-执行管道命令"><span>使用 python 执行管道命令</span></a></h2><p><a href="http://www.ccike.com/?p=118" target="_blank" rel="noopener noreferrer">使用 python 执行管道命令</a></p><h2 id="报错处理" tabindex="-1"><a class="header-anchor" href="#报错处理"><span>报错处理</span></a></h2><h3 id="permission-denied" tabindex="-1"><a class="header-anchor" href="#permission-denied"><span>permission denied</span></a></h3><p>没有权限，执行下面命令设置权限：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>sudo chmod -R 777 设置权限的路径</span></span>
<span class="line"><span>sudo chmod -R 777 /Users/yunxi/Desktop/yunxitech/matias_github/python-story</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-R</code> 是指级联应用到目录里的所有子目录和文件</li><li><code>777</code> 是所有用户都拥有最高权限</li></ul><h3 id="nameerror-name-is-not-defined" tabindex="-1"><a class="header-anchor" href="#nameerror-name-is-not-defined"><span>NameError: name &#39;****&#39; is not defined</span></a></h3><p>python函数的应用一般需要：先定义、后调用 如果函数定义在调用之后，执行将报错：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>NameError: name &#39;****&#39; is not defined</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="syntaxerror-non-ascii-character-xe7" tabindex="-1"><a class="header-anchor" href="#syntaxerror-non-ascii-character-xe7"><span>SyntaxError: Non-ASCII character &#39;\\xe7&#39;</span></a></h3><p>python2运行时报错：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>SyntaxError: Non-ASCII character &#39;\\xe7&#39; in file python_encod_decode.py on line 1, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当在Python 2.X文件中写中文注释或输出中文时候，经常会出现编译错误（在Python 3.X中没有这种错误。）这是因为Python 2.X的默认编码文件是用ASCII码</p><p>头部加上如下代码：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#coding=utf-8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,75)]))}const r=e(t,[["render",l],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/article/rpe3xjjp/","title":"python","lang":"zh-CN","frontmatter":{"title":"python","createTime":"2025/01/21 15:30:36","permalink":"/article/rpe3xjjp/","watermark":true},"headers":[],"readingTime":{"minutes":8.64,"words":2592},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/python/python.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"0d4964","sort":10032,"name":"python"}],"bulletin":false}');export{r as comp,h as data};
