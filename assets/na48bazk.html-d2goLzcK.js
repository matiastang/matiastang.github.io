import{_ as e,c as t,a as o,o as r}from"./app-CS9K37Kg.js";const n={};function l(s,a){return r(),t("div",null,a[0]||(a[0]=[o('<h1 id="yaml" tabindex="-1"><a class="header-anchor" href="#yaml"><span>yaml</span></a></h1><p><a href="https://yaml.org/refcard.html" target="_blank" rel="noopener noreferrer">YAML 1.1</a><a href="https://nodeca.github.io/js-yaml" target="_blank" rel="noopener noreferrer">js-yaml在线测试</a></p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p><code>YAML</code>（ <code>YAML</code> 不是标记语言<code>YAML Ain&#39;t Markup Language</code>）是一种适宜阅读理解的数据序列化语言。它的语法简单而易于阅读。它不包含引号、打开和关闭的标签或大括号。它不包含任何可能使人类难以解析嵌套规则的东西</p><h2 id="规则" tabindex="-1"><a class="header-anchor" href="#规则"><span>规则</span></a></h2><p>它的基本语法规则如下：</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格。</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li></ul><p><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p><p><code>YAML</code> 支持的数据结构有三种：</p><ol><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li><li>纯量（scalars）：单个的、不可再分的值</li></ol><h1 id="yaml文件格式化" tabindex="-1"><a class="header-anchor" href="#yaml文件格式化"><span>yaml文件格式化</span></a></h1><p>Visual Studio Code (VS Code) 中有一些插件可以自动调整 <code>.yaml</code> 文件的格式，确保它们遵循 YAML 规范并保持良好的代码风格。以下是一些常用的 YAML 格式化插件：</p><h3 id="_1-red-hat-yaml" tabindex="-1"><a class="header-anchor" href="#_1-red-hat-yaml"><span>1. <strong>Red Hat YAML</strong></span></a></h3><p>由 Red Hat 开发，这是一个功能全面且广受欢迎的 YAML 支持插件，它提供了语法高亮、代码片段、自动完成、错误检查以及最重要的——格式化功能。只需安装此插件，即可使用它提供的快捷键或右键菜单选项来格式化 YAML 文件。</p><ul><li><strong>安装</strong>：在 VS Code 扩展市场搜索 “Red Hat YAML”，找到后点击“安装”。</li></ul><h3 id="_2-yaml" tabindex="-1"><a class="header-anchor" href="#_2-yaml"><span>2. <strong>YAML</strong></span></a></h3><p>这是由 Prisma Labs, Inc. 开发的一款简单而实用的插件，专注于提供 YAML 语法高亮和格式化功能。它也支持一键格式化，确保您的 YAML 文件整洁有序。</p><ul><li><strong>安装</strong>：在 VS Code 扩展市场搜索 “YAML”，找到后点击“安装”。</li></ul><h3 id="_3-yaml-support-by-alessandro-benoit" tabindex="-1"><a class="header-anchor" href="#_3-yaml-support-by-alessandro-benoit"><span>3. <strong>YAML Support by Alessandro Benoit</strong></span></a></h3><p>另一个提供 YAML 语法高亮、代码片段和格式化的插件。它同样具有格式化功能，可以方便地整理 YAML 文件的结构。</p><ul><li><strong>安装</strong>：在 VS Code 扩展市场搜索 “YAML Support by Alessandro Benoit”，找到后点击“安装”。</li></ul><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法：</span></a></h3><p>安装任一上述插件后，您通常可以通过以下方式之一来格式化 YAML 文件：</p><ul><li><p><strong>快捷键</strong>：大多数插件默认会绑定一个快捷键（如 <code>Shift + Alt + F</code> 或 <code>Ctrl + Shift + I</code>），按下该快捷键即可自动格式化当前打开的 YAML 文件。</p></li><li><p><strong>右键菜单</strong>：在 YAML 文件的编辑窗口中右键点击，选择“Format Document”（或类似名称的菜单项），插件会自动调整文件格式。</p></li><li><p><strong>命令面板</strong>：按下 <code>Ctrl + Shift + P</code>（Windows/Linux）或 <code>Cmd + Shift + P</code>（macOS），在弹出的命令面板中输入“format”或“yaml format”，选择相应的命令执行格式化操作。</p></li></ul><p>安装插件后，您可能还需要在 VS Code 设置中确认已启用自动格式化功能（如“editor.formatOnSave”），这样每次保存 YAML 文件时，插件会自动对其进行格式化。</p><p>选择一个适合您的插件安装并启用相应功能后，即可在 VS Code 中享受自动调整 <code>.yaml</code> 文件格式的便利。如果您对某个插件的具体使用方法有疑问，可以查阅其文档或市场页面上的用户评论与说明。</p>',26)]))}const d=e(n,[["render",l],["__file","na48bazk.html.vue"]]),c=JSON.parse('{"path":"/article/na48bazk.html","title":"yaml","lang":"zh-CN","frontmatter":{"title":"yaml","createTime":"2025/01/20 18:20:20","permalink":"/article/na48bazk.html","watermark":true},"headers":[],"readingTime":{"minutes":3.03,"words":909},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/back/yaml.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"7b2314","sort":10019,"name":"back"}],"bulletin":false}');export{d as comp,c as data};
