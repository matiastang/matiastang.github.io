import{_ as r,c as p,a,o as t}from"./app-CS9K37Kg.js";const o={};function n(s,e){return t(),p("div",null,e[0]||(e[0]=[a('<p>MCP（Model Context Protocol，模型上下文协议） ，2024年11月底，由 Anthropic 推出的一种开放标准，旨在统一大型语言模型（LLM）与外部数据源和工具之间的通信协议。MCP 的主要目的在于解决当前 AI 模型因数据孤岛限制而无法充分发挥潜力的难题，MCP 使得 AI 应用能够安全地访问和操作本地及远程数据，为 AI 应用提供了连接万物的接口。</p><h2 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念"><span>相关概念</span></a></h2><ul><li>Function Calling是AI模型调用函数的机制，面向开发者</li><li>MCP是一个标准协议，可以让AI模型与API无缝交互</li><li>AI Agent是一个自主运行的智能系统，利用Function Calling和MCP来分析和执行任务，实现特定目标</li></ul><h2 id="mcp-核心概念" tabindex="-1"><a class="header-anchor" href="#mcp-核心概念"><span>MCP 核心概念</span></a></h2><p>MCP 遵循客户端-服务器架构（client-server），其中包含以下几个核心概念：</p><ul><li>MCP 主机（MCP Hosts）：发起请求的 LLM 应用程序（例如 Claude Desktop、IDE 或 AI 工具）。</li><li>MCP 客户端（MCP Clients）：在主机程序内部，与 MCP server 保持 1:1 的连接。</li><li>MCP 服务器（MCP Servers）：为 MCP client 提供上下文、工具和 prompt 信息。</li><li>本地资源（Local Resources）：本地计算机中可供 MCP server 安全访问的资源（例如文件、数据库）。</li><li>远程资源（Remote Resources）：MCP server 可以连接到的远程资源（例如通过 API）。</li></ul><h3 id="mcp-client" tabindex="-1"><a class="header-anchor" href="#mcp-client"><span>MCP Client</span></a></h3><p>MCP client 充当 LLM 和 MCP server 之间的桥梁，MCP client 的工作流程如下：</p><p>MCP client 首先从 MCP server 获取可用的工具列表。 将用户的查询连同工具描述通过 function calling 一起发送给 LLM。 LLM 决定是否需要使用工具以及使用哪些工具。 如果需要使用工具，MCP client 会通过 MCP server 执行相应的工具调用。 工具调用的结果会被发送回 LLM。 LLM 基于所有信息生成自然语言响应。 最后将响应展示给用户。 Claude Desktop 和Cursor都支持了MCP Server接入能力，它们就是作为 MCP client来连接某个MCP Server感知和实现调用。</p><h3 id="mcp-server" tabindex="-1"><a class="header-anchor" href="#mcp-server"><span>MCP Server</span></a></h3><p>MCP server 是 MCP 架构中的关键组件，它可以提供 3 种主要类型的功能：</p><p>资源（Resources）：类似文件的数据，可以被客户端读取，如 API 响应或文件内容。 工具（Tools）：可以被 LLM 调用的函数（需要用户批准）。 提示（Prompts）：预先编写的模板，帮助用户完成特定任务。 这些功能使 MCP server 能够为 AI 应用提供丰富的上下文信息和操作能力，从而增强 LLM 的实用性和灵活性。</p><p>你可以在 MCP Servers Repository 和 Awesome MCP Servers 这两个 repo 中找到许多由社区实现的 MCP server。使用 TypeScript 编写的 MCP server 可以通过 npx 命令来运行，使用 Python 编写的 MCP server 可以通过 uvx 命令来运行。</p><h3 id="mcp-servers" tabindex="-1"><a class="header-anchor" href="#mcp-servers"><span>MCP Servers</span></a></h3><p>首先推荐的是官方组织的一些 Server：<a href="https://github.com/modelcontextprotocol/servers" target="_blank" rel="noopener noreferrer">官方的 MCP Server 列表</a>。</p><p>目前社区的 MCP Server 还是比较混乱，有很多缺少教程和文档，很多的代码功能也有问题，我们可以自行尝试一下 <a href="https://cursor.directory/" target="_blank" rel="noopener noreferrer">Cursor Directory</a> 的一些例子，具体的配置和实战笔者就不细讲了，大家可以参考官方文档。</p><p>社区的 MCP Server 的列表</p><p><a href="https://cursor.directory/" target="_blank" rel="noopener noreferrer">Cursor Directory</a></p><p><a href="https://www.pulsemcp.com/" target="_blank" rel="noopener noreferrer">Pulsemcp</a></p><p><a href="https://glama.ai/mcp/servers" target="_blank" rel="noopener noreferrer">Glama MCP Servers</a></p><p><a href="https://smithery.ai/" target="_blank" rel="noopener noreferrer">smithery.ai</a></p><p>数据与文件系统：</p><p>文件系统：提供安全文件操作，带可配置的访问控制。</p><p>PostgreSQL：提供只读数据库访问，具备架构检查功能。</p><p>SQLite：支持数据库交互和商业智能功能。</p><p>Google Drive：实现Google Drive的文件访问和搜索功能。</p><p>开发工具：</p><p>Git：工具用于读取、搜索和操作Git仓库。</p><p>GitHub：集成仓库管理、文件操作和GitHub API。</p><p>GitLab：支持项目管理的GitLab API集成。</p><p>Sentry：从http://Sentry.io获取并分析问题。</p><p>网络与浏览器自动化：</p><p>Brave Search：利用Brave的搜索API进行网络和本地搜索。</p><p>Fetch：为LLM优化的网络内容获取和转换。</p><p>Puppeteer：提供浏览器自动化和网页抓取功能。</p><p>生产力和通信：</p><p>Slack：支持频道管理和消息功能。</p><p>Google Maps：提供位置服务、路线和地点详情。</p><p>Memory：基于知识图谱的持久记忆系统。</p><p>AI与专业工具：</p><p>EverArt：使用多种模型进行AI图像生成。</p><p>Sequential Thinking：通过思维序列进行动态问题解决。</p><p>AWS KB Retrieval：使用Bedrock Agent Runtime从AWS知识库检索。</p><p>官方集成工具：</p><p>这些MCP服务器由公司维护，用于其平台：</p><p>Axiom：使用自然语言查询和分析日志、跟踪和事件数据。</p><p>Browserbase：云端自动化浏览器交互。</p><p>Cloudflare：在Cloudflare开发者平台上部署和管理资源。</p><p>E2B：在安全的云沙箱中执行代码。</p><p>Neon：与Neon无服务器Postgres平台交互。</p><p>Obsidian Markdown Notes：读取和搜索Obsidian知识库中的Markdown笔记。</p><p>Qdrant：使用Qdrant向量搜索引擎实现语义记忆。</p><p>Raygun：访问崩溃报告和监控数据。</p><p>Search1API：统一的API用于搜索、爬虫和网站地图。</p><p>Tinybird：与Tinybird无服务器ClickHouse平台交互。</p><p>集成工具：</p><p>Docker：管理容器、镜像、卷和网络。</p><p>Kubernetes：管理pod、部署和服务。</p><p>Linear：项目管理和问题跟踪。</p><p>Snowflake：与Snowflake数据库交互。</p><p>Spotify：控制Spotify播放和管理播放列表。</p><p>Todoist：任务管理集成。</p><h3 id="通信机制" tabindex="-1"><a class="header-anchor" href="#通信机制"><span>通信机制</span></a></h3><p>MCP 协议支持两种主要的通信机制：基于标准输入输出的本地通信和基于SSE（Server-Sent Events）的远程通信。</p><p>这两种机制都使用 JSON-RPC 2.0 格式进行消息传输，确保了通信的标准化和可扩展性。</p><ul><li>本地通信：通过 stdio 传输数据，适用于在同一台机器上运行的客户端和服务器之间的通信。</li><li>远程通信：利用 SSE 与 HTTP 结合，实现跨网络的实时数据传输，适用于需要访问远程资源或分布式部署的场景。</li></ul><h2 id="对mcp的理解" tabindex="-1"><a class="header-anchor" href="#对mcp的理解"><span>对MCP的理解</span></a></h2><p>MCP 是一种协议，旨在为大型语言模型（LLM）与外部数据源和工具之间的通信提供统一的标准。通过 MCP，LLM 可以安全地访问和操作本地及远程数据，从而实现更丰富的功能和更强大的应用。和之前我们自己实现模型与数据库、API交互差不多，在之前我们自己实现一套框架来完成复杂任务时，也是会定义一套function call 的规范，以方便快速接入不同的功能模块。只是MCP得到了更多公司和社区的支持，影响更大。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://github.com/modelcontextprotocol" target="_blank" rel="noopener noreferrer">官方的开源组织</a></p><p><a href="https://modelcontextprotocol.io/introduction" target="_blank" rel="noopener noreferrer">官方文档</a></p><p><a href="https://github.com/modelcontextprotocol/servers" target="_blank" rel="noopener noreferrer">官方的 MCP Server 列表</a></p><p><a href="https://zhuanlan.zhihu.com/p/27327515233" target="_blank" rel="noopener noreferrer">一文看懂：MCP(大模型上下文)</a></p><p><a href="https://cursor.directory/" target="_blank" rel="noopener noreferrer">Cursor Directory</a></p><p><a href="https://www.pulsemcp.com/" target="_blank" rel="noopener noreferrer">Pulsemcp</a></p><p><a href="https://glama.ai/mcp/servers" target="_blank" rel="noopener noreferrer">Glama MCP Servers</a></p><p><a href="https://smithery.ai/" target="_blank" rel="noopener noreferrer">smithery.ai</a></p>',77)]))}const i=r(o,[["render",n],["__file","yioa2t5v.html.vue"]]),c=JSON.parse('{"path":"/llm/mcp/yioa2t5v.html","title":"MCP协议","lang":"zh-CN","frontmatter":{"title":"MCP协议","createTime":"2025/03/19 13:56:26","permalink":"/llm/mcp/yioa2t5v.html","watermark":true},"headers":[],"readingTime":{"minutes":5.95,"words":1785},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/llm/mcp/MCP.md","bulletin":false}');export{i as comp,c as data};
