import{_ as d,c as o,a as c,o as a}from"./app-CS9K37Kg.js";const i={};function s(t,e){return a(),o("div",null,e[0]||(e[0]=[c(`<p>git 的忽略文件是<code>.gitignore</code>，可以通过该文件来配置需要忽略的文件或文件夹。</p><h2 id="gitignore" tabindex="-1"><a class="header-anchor" href="#gitignore"><span>.gitignore</span></a></h2><p>在项目根目录下创建一个 <code>.gitignore</code> 文件，然后在该文件中添加需要忽略的文件或文件夹。</p><p>例如，要忽略 <code>node_modules</code> 文件夹，可以在 <code>.gitignore</code> 文件中添加以下内容：</p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">node_modules/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，<code>node_modules</code> 文件夹就会被 Git 忽略，不会被提交到版本库中。</p><h2 id="忽略规则" tabindex="-1"><a class="header-anchor" href="#忽略规则"><span>忽略规则</span></a></h2><ul><li><code>#</code>：注释</li><li><code>*</code>：匹配任意字符（除路径分隔符 <code>/</code> 之外），例如 <code>*.txt</code> 匹配所有 <code>.txt</code> 文件</li><li><code>**</code>：匹配任意字符，包括路径分隔符 <code>/</code>，例如 <code>**/*.txt</code> 匹配所有 <code>.txt</code> 文件，包括子文件夹中的文件</li><li><code>!</code>：排除匹配的文件或文件夹，例如 <code>!README.md</code> 表示不忽略 <code>README.md</code> 文件</li><li><code>/</code>：匹配当前目录下的文件或文件夹，例如 <code>/node_modules/</code> 表示忽略当前目录下的 <code>node_modules</code> 文件夹</li><li><code>**/</code>：匹配任意目录下的文件或文件夹，例如 <code>**/node_modules/</code> 表示忽略所有目录下的 <code>node_modules</code> 文件夹</li><li><code>!**/</code>：排除任意目录下的文件或文件夹，例如 <code>!**/node_modules/</code> 表示不忽略所有目录下的 <code>node_modules</code> 文件夹</li><li><code>?</code>：匹配单个字符，例如 <code>?.txt</code> 匹配所有以 <code>.txt</code> 结尾的文件，但忽略路径分隔符 <code>/</code></li><li><code>[...]</code>：匹配字符集，例如 <code>[abc]</code> 匹配 <code>a</code>、<code>b</code> 或 <code>c</code>，<code>[a-z]</code> 匹配所有小写字母</li><li><code>[!...]</code>：匹配非字符集，例如 <code>[!abc]</code> 匹配除 <code>a</code>、<code>b</code> 和 <code>c</code> 之外的字符</li><li><code>{a,b,c}</code>：匹配多个选项中的一个，例如 <code>{foo,bar}</code> 匹配 <code>foo</code> 或 <code>bar</code></li><li><code>{a..z}</code>：匹配字符范围，例如 <code>{a..z}</code> 匹配所有小写字母</li><li><code>{1..3}</code>：匹配数字范围，例如 <code>{1..3}</code> 匹配 <code>1</code>、<code>2</code> 和 <code>3</code></li><li><code>{a,b,c}{1,2,3}</code>：匹配多个选项和数字范围的组合，例如 <code>{foo,bar}{1,2,3}</code> 匹配 <code>foo1</code>、<code>foo2</code>、<code>foo3</code>、<code>bar1</code>、<code>bar2</code> 和 <code>bar3</code></li><li><code>{a,b,c}/**</code>：匹配多个选项和任意目录的组合，例如 <code>{foo,bar}/**</code> 匹配 <code>foo</code> 和 <code>bar</code> 目录下的所有文件和子文件夹</li><li><code>{a,b,c}/**/node_modules/</code>：匹配多个选项和任意目录下的 <code>node_modules</code> 文件夹的组合，例如 <code>{foo,bar}/**/node_modules/</code> 匹配 <code>foo</code> 和 <code>bar</code> 目录下的所有 <code>node_modules</code> 文件夹</li><li><code>{a,b,c}/**/node_modules/**</code>：匹配多个选项和任意目录下的 <code>node_modules</code> 文件夹及其子文件夹的组合，例如 <code>{foo,bar}/**/node_modules/**</code> 匹配 <code>foo</code> 和 <code>bar</code> 目录下的所有 <code>node_modules</code> 文件夹及其子文件夹中的文件和子文件夹</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><h2 id="忽略-data-目录下的所有内容-但保留-data-mnist-test-及其内容" tabindex="-1"><a class="header-anchor" href="#忽略-data-目录下的所有内容-但保留-data-mnist-test-及其内容"><span>忽略 <code>data/</code> 目录下的所有内容，但保留 <code>data/MNIST_TEST/</code> 及其内容</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 忽略 data/ 目录下的所有内容</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">data/*</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 但不要忽略 MNIST_TEST 目录</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!data/MNIST_TEST/</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 确保 MNIST_TEST 目录下的文件也被保留</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!data/MNIST_TEST/**/*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)]))}const n=d(i,[["render",s],["__file","t9b1dv9a.html.vue"]]),r=JSON.parse('{"path":"/article/t9b1dv9a.html","title":"git忽略文件","lang":"zh-CN","frontmatter":{"title":"git忽略文件","createTime":"2025/04/08 11:23:40","permalink":"/article/t9b1dv9a.html","watermark":true},"headers":[],"readingTime":{"minutes":2.4,"words":719},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/git/git忽略文件.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"05b1be","sort":10005,"name":"git"}],"bulletin":false}');export{n as comp,r as data};
