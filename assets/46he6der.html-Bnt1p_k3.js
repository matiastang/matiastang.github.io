import{_ as e,c as i,a,o as n}from"./app-CS9K37Kg.js";const p="/notes/nas/OpenWebUI%E7%9A%84DockerCompose.jpg",t="/notes/nas/openwebui%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85.jpg",l="/notes/nas/openwebui%E5%AE%89%E8%A3%85%E4%B8%AD.jpg",o="/notes/nas/openwebui%E9%A6%96%E9%A1%B5.jpg",r="/notes/nas/openwebui%E5%88%9B%E5%BB%BA%E7%AE%A1%E7%90%86%E5%91%98.jpg",d="/notes/nas/openwebui%E9%A6%96%E6%AC%A1%E8%BF%9B%E5%85%A5.jpg",h="/notes/nas/openwebui%E6%A8%A1%E5%9E%8B%E4%B8%8B%E8%BD%BD%E4%B8%AD.jpg",k="/notes/nas/deepseek1.5b%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8.jpg",c={};function m(A,s){return n(),i("div",null,s[0]||(s[0]=[a(`<p>昨天试了一下在本地部署<code>DeepSeek</code>量化版本，发现效果不错，还能用。刚好收到绿联推送了一篇文章，<a href="https://mp.weixin.qq.com/s/-zIscBvawMvnEYLccuA4pg" target="_blank" rel="noopener noreferrer">在绿联NAS上本地化部署DeepSeek-R1大语言模型教程来啦！</a>，今天试了一下在绿联NAS上部署一个<code>1.5B</code>的量化版本试试效果。</p><h2 id="编写docker-compose配置文件" tabindex="-1"><a class="header-anchor" href="#编写docker-compose配置文件"><span>编写<code>Docker Compose</code>配置文件</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">3.8</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">services</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  open-webui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    container_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> open-webui</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 容器名称</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    image</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ghcr.io/open-webui/open-webui:ollama</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #镜像名称</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # docker 镜像仓库的加速器配置，建议添加https://docker.nju.edu.cn/</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    restart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> always</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 重启策略，容器总是重新启动</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    ports</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 3000:8080</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 将容器的8080端口映射到主机的3000端口</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    volumes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./ollama:/root/.ollama</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 将ollama文件夹挂载到容器的/root/.ollama目录,存储ollama相关数据</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./open-webui:/app/backend/data</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 将open-webui文件夹挂载到容器的/app/backend/data目录,存储WebUI的后台数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里直接使用的<code>ghcr.io/open-webui/open-webui:ollama</code>镜像，在本机我是先安装的<code>Ollama</code>在命令行测试了之后，再接入的<code>open-webui</code>。这里就按照文章中的教程来。</p><h2 id="创建docker项目" tabindex="-1"><a class="header-anchor" href="#创建docker项目"><span>创建Docker项目</span></a></h2><p>根据文章中的提示，我们先添加<code>https://docker.nju.edu.cn</code>到 <code>docker</code> 镜像仓库的加速器配置中。</p><p>输入名称，选择路径后，直接导入上面的配置。如下：</p><p><img src="`+p+'" alt="OpenWebUI的DockerCompose"></p><p>等待下载完成，挺大的，下了很久。</p><p><img src="'+t+'" alt="openwebui开始安装"></p><p>过了很久，出现下面这个样子，不显示进度了，不知道是不是<code>bug</code>。等了一会儿，看没有什么下载流量了，就关闭了这个窗口。</p><p><img src="'+l+'" alt="openwebui安装中"></p><p>下载完成后容器就启动了。</p><p>我使用的是在浏览器中访问<code>NAS</code>，然后使用<code>Firefox</code>访问的<code>Docker</code>中的<code>OpenWebUI</code>服务。</p><p>首页如下： <img src="'+o+'" alt="openwebui首页"></p><p>点击之后需要先创建管理员 <img src="'+r+'" alt="openwebui创建管理员"></p><p>创建了之后，就登录了。这里要注意的是，需要多等一会儿，开始白屏了一段时间，后面才进入，可能是在加载。</p><p>首次进入对话页面如下： <img src="'+d+'" alt="openwebui首次进入"></p><p>可以看到，现在我们还没有下载模型，所以这里没有模型可以选择。</p><p>使用Ollama下载ModelScope的量化模型 <img src="'+h+'" alt="openwebui模型下载中"></p><p>下载完成后，就可以选择模型运行了。</p><p>我下载的是最小的<code>DeepSeek-R1-Distill-Qwen-1.5B</code>量化模型，在DXP4800P跑的速度在5-8token/s，CPU 17%左右，RAM 3.1GB。没有太多实用价值。</p><p><img src="'+k+'" alt="deepseek1.5b运行内存占用"></p><p>MacBookPro M1 16GB上跑<code>DeepSeek-R1-Distill-Qwen-1.5B</code>速度在20-30token/s，<code>DeepSeek-R1-Distill-Qwen-7B</code>在8token/s左右。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://mp.weixin.qq.com/s/-zIscBvawMvnEYLccuA4pg" target="_blank" rel="noopener noreferrer">在绿联NAS上本地化部署DeepSeek-R1大语言模型教程来啦！</a></p>',26)]))}const u=e(c,[["render",m],["__file","46he6der.html.vue"]]),b=JSON.parse('{"path":"/nas/46he6der.html","title":"绿联NAS部署DeepSeek量化版本","lang":"zh-CN","frontmatter":{"title":"绿联NAS部署DeepSeek量化版本","createTime":"2025/02/08 15:25:58","permalink":"/nas/46he6der.html","watermark":true},"headers":[],"readingTime":{"minutes":2.59,"words":776},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/nas/绿联NAS部署DeepSeek量化版本.md","bulletin":false}');export{u as comp,b as data};
