import{_ as e,c as o,a,o as t}from"./app-CS9K37Kg.js";const n={};function h(l,r){return t(),o("div",null,r[0]||(r[0]=[a('<p>PyTorch 是一种开源深度学习框架，以出色的灵活性和易用性著称。</p><p>PyTorch 是一种用于构建深度学习模型的功能完备框架，是一种通常用于图像识别和语言处理等应用程序的机器学习。使用 Python 编写，因此对于大多数机器学习开发者而言，学习和使用起来相对简单。PyTorch 的独特之处在于，它完全支持 GPU，并且使用<a href="https://justindomke.wordpress.com/2009/03/24/a-simple-explanation-of-reverse-mode-automatic-differentiation/" target="_blank" rel="noopener noreferrer">反向模式自动微分</a>技术，因此可以动态修改计算图形。这使其成为快速实验和原型设计的常用选择。</p><p>PyTorch 是 Facebook AI Research 和其他几个实验室的开发者的工作成果。该框架将 Torch 中高效而灵活的 GPU 加速后端库与直观的 Python 前端相结合，后者专注于快速原型设计、可读代码，并支持尽可能广泛的深度学习模型。Pytorch 支持开发者使用熟悉的命令式编程方法，但仍可以输出到图形。它于 2017 年以开源形式发布，其 Python 根源使其深受机器学习开发者的喜爱。</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li>PyTorch.org 社区有一个充满活力的大型社区，具有优秀的文档和教程。论坛十分活跃，并能给予帮助和支持。</li><li>采用 Python 编写，并集成了热门的 Python 库，例如用于科学计算的 NumPy、SciPy 和用于将 Python 编译为 C 以提高性能的 Cython。由于 PyTorch 的语法和用法类似于 Python，因此对于 Python 开发者来说，学习起来相对容易。</li><li>受主要云平台的有力支持。</li><li>脚本语言（称为 TorchScript）在即时模式下易于使用且灵活。这是一种快速启动执行模式，从 Python 调用运算时立即执行运算，但也可以在 C++ 运行时环境中转换为图形模型，以提高速度和实现优化。</li><li>它支持 CPU、GPU、并行处理以及分布式训练。这意味着计算工作可以在多个 CPU 和 GPU 核心之间分配，并且可以在多台机器上的多个 GPU 上进行训练。</li><li>PyTorch 支持动态计算图形，能够在运行时更改网络行为。与大多数机器学习框架相比，提供了更大的灵活性优势，因为大多数机器学习框架要求在运行时之前将神经网络定义为静态对象。</li><li>PyTorch Hub 是一个预训练模型库，在某些情况下只需使用一行代码就可以调用。</li><li>新自定义组件可创建为标准 Python 类的子类，可以通过 TensorBoard 等外部工具包轻松共享参数，并且可以轻松导入和内联使用库。</li><li>PyTorch 拥有一组备受好评的 API，可用于扩展核心功能。</li><li>既支持用于实验的“即时模式”，也支持用于高性能执行的“图形模式”。</li><li>拥有从计算机视觉到增强学习等领域的大量工具和库。</li><li>支持 Python 程序员熟悉的纯 C++ 前端接口，可用于构建高性能 C++ 应用程序。</li></ul><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h2><p>PyTorch 和 TensorFlow 的相似之处在于，两者的核心组件都是张量和图形。</p><h3 id="张量" tabindex="-1"><a class="header-anchor" href="#张量"><span>张量</span></a></h3><p>张量是一种核心 PyTorch 数据类型，类似于多维数组，用于存储和操作模型的输入和输出以及模型的参数。张量与 NumPy 的 ndarray 类似，只是张量可以在 GPU 上运行以加速计算。</p><h3 id="图形" tabindex="-1"><a class="header-anchor" href="#图形"><span>图形</span></a></h3><p>神经网络将一系列嵌套函数应用于输入参数，以转换输入数据。深度学习的目标是通过计算相对损失指标的偏导数（梯度），优化这些参数（包括权重和偏差，在 PyTorch 中以张量的形式存储）。在前向传播中，神经网络接受输入参数，并向下一层的节点输出置信度分数，直至到达输出层，在该层计算分数误差。在一个称为梯度下降的过程中，通过反向传播，误差会再次通过网络发送回来，并调整权重，从而改进模型。</p><p>图形是由已连接节点（称为顶点）和边缘组成的数据结构。每个现代深度学习框架都基于图形的概念，其中神经网络表示为计算的图形结构。PyTorch 在由函数对象组成的有向无环图 (DAG) 中保存张量和执行操作的记录。在以下 DAG 中，叶是输入张量，根是输出张量。</p><p>有向无环图 (DAG)。</p><p>在许多热门框架（包括 TensorFlow）中，计算图形是一个静态对象。PyTorch 基于<a href="https://developer.nvidia.com/blog/recursive-neural-networks-pytorch/" target="_blank" rel="noopener noreferrer"><strong>动态计算图形</strong></a>，即，在运行时构建和重建计算图形，并使用与执行前向传递的计算相同的代码，同时还创建反向传播所需的数据结构。PyTorch 是首个运行时定义深度学习框架，与 TensorFlow 等静态图形框架的功能和性能相匹配，非常适合从标准卷积网络到时间递归神经网络等所有网络。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://pytorch.org/" target="_blank" rel="noopener noreferrer">pytorch</a></p><p><a href="https://www.nvidia.cn/glossary/pytorch/" target="_blank" rel="noopener noreferrer">nvidia pytorch</a></p>',17)]))}const c=e(n,[["render",h],["__file","olg66auh.html.vue"]]),s=JSON.parse('{"path":"/llm/pytorch/olg66auh.html","title":"PyTorch","lang":"zh-CN","frontmatter":{"title":"PyTorch","createTime":"2025/03/21 17:57:05","permalink":"/llm/pytorch/olg66auh.html","watermark":true},"headers":[],"readingTime":{"minutes":4.56,"words":1367},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/llm/pytorch/PyTorch.md","bulletin":false}');export{c as comp,s as data};
