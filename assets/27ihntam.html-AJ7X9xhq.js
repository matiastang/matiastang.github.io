import{_ as o,c as t,a as c,o as i}from"./app-CS9K37Kg.js";const d={};function m(a,e){return i(),t("div",null,e[0]||(e[0]=[c('<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="git-commit-amend" tabindex="-1"><a class="header-anchor" href="#git-commit-amend"><span>git commit --amend</span></a></h3><p>当<code>git commit</code>之后发现<code>描述</code>或<code>内容</code>有缺失或问题，需要更新，但又不想重新<code>commit</code>则可以使用<code>git commit --amend</code>指令把新的修改合并到之前的提交中，然后生产一个新的提交。</p><ol><li>当描述需要更新时</li></ol><p>直接执行<code>git commit --amend</code>则进入到上一次的<code>vim</code>页面，<code>i</code>进入编辑状态后，直接修改描述，然后<code>esc</code>退出编辑状态，<code>:wq</code>则保存退出。这个时候<code>git log</code>可以查看到更新的内容。</p><ol start="2"><li>当有内容需要更新时</li></ol><p>修改内容后、正常的<code>git add .</code>添加修改，然后执行<code>git commit --amend</code>后同样进入<code>vim</code>页面，也可以更新描述。更新方式如上，如果不更新描述则<code>:q</code>退出即可。<code>git log</code>可以查看到更新的内容了。</p><ul><li><code>git commit --amend</code>会把暂存区的文件自动加入，可以使用<code>-a</code>把工作区的文件也一起加入。</li><li>可以使用<code>git commit --amend -m &quot;提交描述&quot;</code> 修改<code>comment</code>。</li></ul><p><strong>注意</strong><code>git commit --amend</code>后是一个新的<code>log</code>，可以通过<code>commit id</code>观察到。相当于把本次和上次的合并成一个新的<code>commit</code>。</p>',9)]))}const r=o(d,[["render",m],["__file","27ihntam.html.vue"]]),l=JSON.parse('{"path":"/git/27ihntam.html","title":"git commit","lang":"zh-CN","frontmatter":{"title":"git commit","createTime":"2025/01/20 17:06:29","permalink":"/git/27ihntam.html","watermark":true},"headers":[],"readingTime":{"minutes":1.13,"words":338},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/git/commit.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"05b1be","sort":10005,"name":"git"}],"bulletin":false}');export{r as comp,l as data};
