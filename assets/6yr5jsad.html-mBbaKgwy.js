import{_ as t,c as a,a as o,o as s}from"./app-CS9K37Kg.js";const c={};function d(i,e){return s(),a("div",null,e[0]||(e[0]=[o('<h2 id="git-push-f" tabindex="-1"><a class="header-anchor" href="#git-push-f"><span>git push -f</span></a></h2><p><code>git push -f</code> 这个命令的作用是将自己本地仓库的代码直接推送至仓库，完全以你的提交为准，之前其他人的提交都会被覆盖。</p><h3 id="使用时机" tabindex="-1"><a class="header-anchor" href="#使用时机"><span>使用时机</span></a></h3><p>有两种情况下适合使用<code>git push -f</code>命令：</p><ol><li>确定需要覆覆盖提交。</li><li>需要整理历史提交记录时，有时候项目的 <code>Commit Logs</code> 可能比较乱，不能清晰的看出每一次提交的作用，可以使用 <code>rebase</code> 命令来清理历史提交记录。因为改变了历史，所以正常来说是 <code>push</code> 不成功的，所以需要使用 <code>force push</code> 来解决这个问题。</li></ol><h3 id="默认分支保护" tabindex="-1"><a class="header-anchor" href="#默认分支保护"><span>默认分支保护</span></a></h3><p>因为可能会出现不小心使用的情况，<code>Github</code>、<code>Gitlab</code>这类源码托管网站会提供分支保护机制。可以避免某个分支被 <code>force push</code>，默认是 <code>master</code> 为保护分支。</p><p><code>Gitlab</code>中，设置-&gt;仓库-&gt;Protected Branches可以取消或设置分支保护。所以如果想强制提交，前提需要取消对该分支的保护。</p><p>如果出现了代码被覆盖情况，可以用你或是其它有之前提交的同事，再次进行 <code>git push -f</code>，将正确的内容强制提交上去，覆盖上一次<code>git push -f</code>所造成的灾难。</p>',9)]))}const n=t(c,[["render",d],["__file","6yr5jsad.html.vue"]]),h=JSON.parse('{"path":"/git/6yr5jsad.html","title":"git push","lang":"zh-CN","frontmatter":{"title":"git push","createTime":"2025/01/20 17:08:26","permalink":"/git/6yr5jsad.html","watermark":true},"headers":[],"readingTime":{"minutes":1.22,"words":367},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/git/push.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"05b1be","sort":10005,"name":"git"}],"bulletin":false}');export{n as comp,h as data};
