import{_ as s,c as e,a as i,o as n}from"./app-CS9K37Kg.js";const l={};function t(h,a){return n(),e("div",null,a[0]||(a[0]=[i(`<p>检查前端包的版本，并提示更新的主要有两类方式：</p><ol><li>接口实现</li></ol><p>通过各种接口，实现web版本更新检查。</p><ol start="2"><li>前端实现校验</li></ol><p>不需要接口，只需要前端校验一些每次打包更新会变化的量，实现检查。</p><ul><li>基于html轮训，加一个meta标签，带上版本号甚至更新日志</li><li>基于图床，ci构建时生成日志文件存到图床</li></ul><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><h3 id="接口实现" tabindex="-1"><a class="header-anchor" href="#接口实现"><span>接口实现</span></a></h3><p>通过新增版本接口来实现检查，是最灵活的。版本信息存储在数据库或缓存中，每次调用接口返回最新的版本。</p><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ul><li>非常灵活，且可以实现一些条件更新等。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ul><li>开发量大，需要一些接口，前后端联调</li><li>需要定义发布流程</li></ul><h3 id="前端实现校验" tabindex="-1"><a class="header-anchor" href="#前端实现校验"><span>前端实现校验</span></a></h3><p>前端自己通过定义一些标识，并获取已检查是否更新，这种还是需要再打包之后有标识信息，只是不需要单独的接口获取，比如用文件保存版本信息，前端直接获取文件，解析出版本号。</p><h4 id="添加版本文件" tabindex="-1"><a class="header-anchor" href="#添加版本文件"><span>添加版本文件</span></a></h4><p>如在<code>public</code>文件夹下，添加一个<code>version.json</code>文件，用于保存版本信息。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">version</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1.0.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端通过一定策略，去获取服务器中的<code>version.json</code>文件，并解析出版本号。通过前后版本号是否变化，如何变化了。制定更新提示逻辑。</p><h5 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h5><ul><li>无需接口</li><li>除了版本号，还可以添加其他更新信息</li></ul><h5 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h5><ul><li>每次需要修改版本信息及更新内容</li></ul><p><strong>提示</strong> 这个确定可以通过脚本来实现，无需手动修改<code>package.json</code>和<code>version.json</code>中的版本信息。</p><h4 id="检查打包后的hash值" tabindex="-1"><a class="header-anchor" href="#检查打包后的hash值"><span>检查打包后的<code>hash</code>值</span></a></h4><p>前端每次打包的时候，都会生成一个<code>hash</code>值，这个<code>hash</code>值是每次打包都会变化的。我们可以通过检查一些文件的<code>hash</code>值是否变化，来判断是否更新。</p><h5 id="优点-2" tabindex="-1"><a class="header-anchor" href="#优点-2"><span>优点</span></a></h5><ul><li>无需接口</li><li>侵入性小，只需要添加检查逻辑。整个开发流程还是一样的，不用自己维护版本信息。</li></ul><h5 id="缺点-2" tabindex="-1"><a class="header-anchor" href="#缺点-2"><span>缺点</span></a></h5><ul><li>只能知道更新了，不知道更新的内容，也不知道最新的版本号是什么。</li></ul><p><strong>提示</strong> 这个缺点就不太好处理了，因为没有版本信息。所以只能结合其他方式，比如一个查询当前最新版本的接口之类的来处理了。</p>`,31)]))}const o=s(l,[["render",t],["__file","g8x8lzms.html.vue"]]),d=JSON.parse('{"path":"/front/g8x8lzms.html","title":"前端检查版本更新","lang":"zh-CN","frontmatter":{"title":"前端检查版本更新","createTime":"2025/01/20 17:42:48","permalink":"/front/g8x8lzms.html","watermark":true},"headers":[],"readingTime":{"minutes":2.27,"words":682},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/front/检查版本更新.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"67ca11","sort":10006,"name":"front"}],"bulletin":false}');export{o as comp,d as data};
