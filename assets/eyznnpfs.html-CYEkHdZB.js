import{_ as o,c as e,a,o as p}from"./app-CS9K37Kg.js";const t={};function c(d,n){return p(),e("div",null,n[0]||(n[0]=[a('<p><code>python</code>主要有<code>Pyenv</code>、<code>Anaconda</code>、<code>miniconda</code>。</p><p><code>Pyenv</code>非常轻量, 和miniconda类似. 但<code>pyenv</code>只管不同的<code>python</code>环境, 还可以配合<code>pyenv-virtualenv</code>。使用<code>pyenv</code>后，<code>python</code>的包管理器还是<code>pip</code>, 在数据科学领域, <code>pip</code>也能实现几乎所有安装, 但<code>conda</code>已成为默认选项。</p><p><code>Miniconda</code>是部署最快的了, <code>linux</code>服务器登陆上去后, <code>wget</code>一个<code>miniconda.sh</code>, 从安装到开始把代码推送过去开始运行可能只需要几分钟。</p><p><code>Anaconda</code>庞大切全面。从下载安装到完全配置好挺长时间。但你不需要考虑包之间依赖关系。切换环境、命令行启动等比较简单。</p><p>更具自己的需求选择不同的管理工具。</p><ul><li>喜欢自己配置环境的且有经验可以选择：<code>miniconda</code></li><li>使用<code>pip</code>等习惯了可以选择：<code>pyenv</code></li><li>如果<code>系统硬盘</code>比较大可以选择：<code>anaconda</code></li></ul><p><strong>建议</strong><code>mac</code>可以选择<code>Pyenv</code>，<code>linux</code>服务器可以选择<code>miniconda</code>，<code>windows</code>可以选择<code>Anaconda</code>。</p><p><a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener noreferrer">pyenv github</a><a href="https://github.com/conda-forge/miniforge" target="_blank" rel="noopener noreferrer">miniforge官网</a></p><p>只用来管理 Python 版本和虚拟环境，Miniconda 也是一个很好的选择 Anaconda 是一个面向数据科学的 Python 发行版，它打包了 Conda、Python 和一堆机器学习和人工智能相关和常用的包，而且还可以用来安装一些非 Python 编写的库。对于科学计算相关的用途非常方便，开箱即用。看起来很适合实验室或是学校机房使用</p><p>对于常规的 Python 开发来说，Anaconda 太重了，而且主要面向科学计算领域，但是精简版的 Miniconda 却是一个很好的 Python 版本和虚拟环境管理工具。</p><p>更重要的是 Miniconda 兼容三个主流操作系统，而且不同平台使用同样的命令和接口（Conda 4.6 以上）。这大概算是个人偏好，因为我总在写东西给别人看，所以总是喜欢兼容主流操作系统并且接口统一的解决方案。而且另一方面 pyenv、virtualenvwrapper、direnv 等等相关替代工具都没有原生 Windows 支持。</p><p>Miniconda 是什么 先来理清几个概念：</p><p>Conda：包、依赖和环境管理器。 Anaconda（某种蟒蛇的名字）：面向数据科学的 Python 发行版，包含 conda、conda-build、Python 和 100+ 常用的数据科学常用的库及其依赖。 Miniconda：精简版的 Anaconda，也是一个 Python 发行版，只包含 conda、Python 和一些基本的包。 相关资源：</p><p>主页：https://conda.io/en/latest/ 源码：https://github.com/conda/conda 文档：https://conda.io/projects/conda/en/latest/ Miniconda 基本用法 首先你需要访问下载页面下载对应操作系统的安装包进行安装，Python 版本选择你想作为默认选项（base version）的版本。然后打开 Windows 下的 Anaconda Prompt 或是 Anaconda Powershell Prompt，Linux 或 macOS 直接使用终端程序。</p><p>下面是一些关键用法介绍，详细内容可以阅读 Conda 文档。</p><p>创建虚拟环境 使用 conda create 命令创建虚拟环境，使用 --name 选项（-n）指定虚拟环境名称：</p><p>$ conda create --name foo 使用 conda info 命令查看当前环境名称、Python 版本、虚拟环境文件夹位置、Conda 版本等等各种信息：</p><p>$ conda info 使用 --envs 选项（-e）查看所有已创建的虚拟环境。在列出的虚拟环境中，使用星号（*）标识的是当前激活的虚拟环境：</p><p>$ conda info --envs 激活虚拟环境 使用 conda activate 命令激活虚拟环境，添加虚拟环境名作为参数：</p><p>$ conda activate foo 激活以后会在命令行提示器前显示虚拟环境名称，比如：</p><p>(foo) $ 不添加虚拟环境名称，就会重新激活基础环境（base）：</p><p>$ conda activate 设置虚拟环境的 Python 版本 在创建虚拟环境的时候，可以使用 python 参数指定 Python 版本。假设你使用的 Miniconda 默认版本是 Python 3.7，如果你想创建一个 Python 2.7 的虚拟环境，使用下面的命令：</p><p>$ conda create --name snakes python=2.7 你可以在虚拟环境名加上标识方便识别 Python 版本，比如：</p><p>$ conda create --name snakes-py27 python=2.7 搭配 pip / Poetry 来管理依赖 因为 Conda 安装库的时候默认使用 Conda 自己的仓库，这里包含的 720 多个库除了流行的 Python 包外大多是数据科学相关的包。更好的选择是使用官方 PyPI 仓库，这样可以确保你使用到最近更新的包，而且不会出现有些包找不到的情况。</p><p>我们要做的就是只用 Conda 的 Python 版本和虚拟环境管理功能，不用它来管理依赖。依赖管理（安装、卸载、更新等）仍然使用 pip 进行，或是进一步搭配 pip-tools 来管理依赖。</p><p>你需要在 conda 环境内使用下面的命令安装 pip：</p><p>$ conda install pip 或是统一使用下面的命令格式创建虚拟环境：</p><p>$ conda create --name bar pip 这样在执行 pip 命令时会使用虚拟环境内的 pip，而不是系统全局的 pip。这样做的副作用是会产生几个多余的依赖。</p><p>除此之外，你也可以搭配使用 Poetry。Poetry 默认会自动创建虚拟环境，所以需要关闭 Poetry 自动创建虚拟环境的设定，执行下面的命令即可：</p><p>$ poetry config settings.virtualenvs.create false 总结 按照我目前掌握到的信息，Miniconda 的优缺点总结如下：</p><p>优点</p><p>用法简单，​易于上手 替代 pyenv+virtualenv/venv+virtualenvwrapper 的多个工具组合 类似 virtualenvwrapper，可以在任意位置激活虚拟环境，而不是必须在项目根目录 支持管理不同的 Python 版本 兼容性很好，支持 Windows 缺点</p><p>在 Windows 下，需要使用专用的命令行程序 依赖管理比较弱，需要搭配 pip/Poetry 来使用 conda 和 pip/Poetry 组合存在潜在的冲突，但情况在改善 既然一个 Miniconda 就能很好的胜任 Python 版本管理和虚拟环境管理的任务，为什么要用 pyenv+virtualenv/venv+virtualenvwrapper 呢？遗憾的就是依赖管理功能不够完善，和 pip/Poetry 搭配使用则可能会有潜在的冲突。所以，推荐觉得 virtualenv/venv+pip 搭配太麻烦的初学者使用；推荐能接受 Conda+pip/Poetry 这种搭配的人使用；推荐使用 Python 做数据科学相关工作的人使用。</p><p>对比之下，最稳定的解决方案大概还是 virtualenv/venv+pip+其他工具</p><p>创建 Python 虚拟环境可以采用以下几种方法：</p><h2 id="使用-venv-python-标准库" tabindex="-1"><a class="header-anchor" href="#使用-venv-python-标准库"><span>使用 venv（Python 标准库）</span></a></h2><p>在命令行中创建虚拟环境： 打开终端（Windows 上是命令提示符或 PowerShell，Mac/Linux 上是 Terminal）。</p><p>导航到你想要创建虚拟环境的目录：</p><p>cd your/project/directory 使用 python3 -m venv 命令创建虚拟环境（在 Windows 上如果默认安装了 Python 3，可以直接使用 python -m venv）： python3 -m venv myenv # Linux/Mac python -m venv myenv # Windows 这里的 myenv 是你要给虚拟环境起的名字，你可以替换为你喜欢的任何名称。</p><p>激活虚拟环境： 在 Windows 上： myenv\\Scripts\\activate.bat 在 Unix 或 macOS 上： source myenv/bin/activate 激活后，你的终端会显示虚拟环境的名称，表示你现在处于该环境中。</p><h2 id="使用-conda-适用于-anaconda-或-miniconda-用户" tabindex="-1"><a class="header-anchor" href="#使用-conda-适用于-anaconda-或-miniconda-用户"><span>使用 conda（适用于 Anaconda 或 Miniconda 用户）</span></a></h2><p>首先确保已经安装了 Anaconda 或 Miniconda，并配置好 conda 环境。</p><p>创建一个新的虚拟环境：</p><p>conda create --name myenv python=3.x 这里 myenv 是环境名，python=3.x 指定使用的 Python 版本，你可以根据需要替换为具体版本号如 3.9。</p><p>激活新创建的虚拟环境： conda activate myenv</p><h2 id="使用-poetry" tabindex="-1"><a class="header-anchor" href="#使用-poetry"><span>使用 poetry</span></a></h2><p>安装 Poetry（如果你尚未安装）： pip install poetry 在项目目录下创建并初始化一个 Poetry 项目，它会自动创建虚拟环境： poetry new my_project cd my_project 或者，如果你已经有 pyproject.toml 文件，在现有项目中创建虚拟环境：</p><p>poetry env use python3.x 进入虚拟环境： poetry shell 以上就是通过不同工具在 Python 中创建虚拟环境的基本步骤。</p>',48)]))}const r=o(t,[["render",c],["__file","eyznnpfs.html.vue"]]),y=JSON.parse('{"path":"/article/eyznnpfs.html","title":"python版本管理","lang":"zh-CN","frontmatter":{"title":"python版本管理","createTime":"2025/01/22 11:11:28","permalink":"/article/eyznnpfs.html","watermark":true},"headers":[],"readingTime":{"minutes":6.86,"words":2057},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/python/python版本管理.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"0d4964","sort":10032,"name":"python"}],"bulletin":false}');export{r as comp,y as data};
