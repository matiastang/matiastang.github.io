import{_ as e,c as p,a as s,o as r}from"./app-CS9K37Kg.js";const a={};function o(n,t){return r(),p("div",null,t[0]||(t[0]=[s('<h1 id="css属性浏览器是否支持的多种方法" tabindex="-1"><a class="header-anchor" href="#css属性浏览器是否支持的多种方法"><span>CSS属性浏览器是否支持的多种方法</span></a></h1><h2 id="原生css-supports语法" tabindex="-1"><a class="header-anchor" href="#原生css-supports语法"><span>原生css.supports语法</span></a></h2><p>返回布尔值 true 或者 false ，用来检测是否支持某css属性。</p><p>语法 CSS.supports(propertyName, value); CSS.supports(supportCondition); 1. 2.</p><p>参数 propertyName</p><p>字符串。用来检测的CSS属性名。</p><p>value</p><p>字符串。用来检测的CSS属性值。</p><p>supportCondition</p><p>字符串。用来检测的CSS声明、表达式或者语法。</p><p>案例 例如，检测浏览器是否支持CSS filter滤镜，则可以：</p><p>result = CSS.supports(&#39;filter&#39;, &#39;blur(5px)&#39;); result = CSS.supports(&#39;filter: 5px&#39;); // 错误语法，返回false 1. 2.</p><p>例如在Chrome浏览器下返回：</p><p>CSS.supports() 还可以用来检测表达式，例如CSS变量语法：</p><p>result = CSS.supports(&#39;--username: zhangxinxu&#39;); result = CSS.supports(&#39;(--username: zhangxinxu)&#39;); 1. 2.</p><p>结果如下图所示：</p><p>可以看到有没有括号都支持。</p><p>CSS.supports() 还支持 @supports 规则，支持逻辑表达，例如：</p><p>result = CSS.supports(&#39;width: fit-content or width: -webkit-fit-content&#39;); result = CSS.supports(&#39;(width: fit-content) or (width: -webkit-fit-content)&#39;); 1. 2.</p><p>可见，此时括号是必须的：</p><p>兼容性 和CSS @supports 规则兼容性一样，Edge12+支持。</p><p>尴尬的现状 实际开发的时候，需要使用到对CSS检测场景，往往都是针对低版本的IE浏览器，例如IE9-IE11。</p><p>于是尴尬的事情出现了，低版本的IE浏览器并不支持浏览器原生支持的 CSS.supports() 方法，于是，我们的实际需求并没有因为这个新的API而得到解决，不得不求助于其他方法。</p><h2 id="js赋值再取值的检测方法" tabindex="-1"><a class="header-anchor" href="#js赋值再取值的检测方法"><span>js赋值再取值的检测方法</span></a></h2><p>这是我 张鑫旭 https://www.zhangxinxu.com 在实际项目中经常使用的一种方法，原理很简单，当浏览器不支持某个CSS属性的时候，就算你强制设置，获取的计算值也不会是你设置的属性值，还是检测浏览器是否支持CSS filter滤镜的例子。</p><p>我会这么处理：</p><p>document.head.style.filter = &#39;blur(5px)&#39;; result = window.getComputedStyle(document.head).filter == &#39;blur(5px)&#39;; 1. 2.</p><p>我们看下上面代码在实际浏览器中的表现，首先是支持的Chrome浏览器， result 的值是 true ：</p><p>然后是不支持的IE11浏览器， result 的值是 false ：</p><p>此方法原理很简单，兼容性也非常好，实现的关键点就是使用 getComputedStyle这个IE9+支持的DOM API方法 ，不能使用 dom.style.xxxx 直接获取。</p><p>如果是想要实现类似or或者and逻辑，例如带私有前缀那种，可以下面这样处理，正则匹配关键的部分：</p><p>document.head.style.width= &#39;fit-content&#39;; document.head.style.width= &#39;-moz-fit-content&#39;; result = /fit-content/.test(window.getComputedStyle(document.head).width); 1. 2. 3.</p><p>例如Firefox浏览器下的结果：</p><p>兼容性 IE9+</p><p>注意点 getComputedStyle() 方法返回的是计算值，很多时候和设置的属性值并不同。</p><p>例如设置行高为小数，在IE浏览器下返回就是px计算值。</p><p>又或者设置 background 属性值，结果返回的是background兄弟姐妹一大家子值：</p><p>document.head.style.background = &#39;paint(abc)&#39;; result = /paint/.test(window.getComputedStyle(document.head).background); // reseult值是true window.getComputedStyle(document.head).background // &quot;rgba(0, 0, 0, 0) paint(abc) repeat scroll 0% 0% / auto padding-box border-box&quot; 1. 2. 3. 4. 5.</p><p>需要使用模糊匹配才行。</p><h2 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法"><span>其他方法</span></a></h2><p>核心思想类似：</p><p>document.head.setAttribute(&#39;style&#39;, &#39;filter: blur(5px)&#39;); result = !!document.head.style.filter; 1. 2.</p><p>Chrome和IE下验证检测结果图：</p>',43)]))}const d=e(a,[["render",o],["__file","index.html.vue"]]),i=JSON.parse('{"path":"/article/9te6pmm2/","title":"JS检测CSS属性浏览器是否支持的多种方法","lang":"zh-CN","frontmatter":{"title":"JS检测CSS属性浏览器是否支持的多种方法","createTime":"2025/01/21 15:17:49","permalink":"/article/9te6pmm2/","watermark":true},"headers":[],"readingTime":{"minutes":2.85,"words":856},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/css/JS检测CSS属性浏览器是否支持的多种方法.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"2dca24","sort":10015,"name":"css"}],"bulletin":false}');export{d as comp,i as data};
