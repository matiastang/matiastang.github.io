import{_ as s,c as e,a as o,o as a}from"./app-CS9K37Kg.js";const n={};function i(p,t){return a(),e("div",null,t[0]||(t[0]=[o('<h1 id="fastapi模块化" tabindex="-1"><a class="header-anchor" href="#fastapi模块化"><span>FastAPI模块化</span></a></h1><p>我们观察官网的示例会发现启动一个项目都是通过简简单单的一个 py 文件来完成请求和响应内容，但是实际工程的模块往往是庞大和复杂的。</p><p>当我们基于 Django 框架开发 Web 应用时，能够通过命令创建出一个项目，并且整个项目结构清晰、规整，而类似 Flask、FastAPI 这些轻量级的框架项目组织需要我们自己来做，清晰、规范和合理的项目组织结构，对开发的效率和质量都有很大的提高。</p><p>FastAPI 提供了类似 Flask 中 Blueprints 功能的工具，它可以在保持灵活性的同时构建应用。子包中的每一个模块需要解耦开，此时可以使用 APIRouter 进行管理，可以理解为小型的 FastAPI 应用，然后将各个部分组合到 FastAPI 主体上即可。</p><p>依据此原理，下面我们构建工厂模式创建 FastAPI 项目示例 myFastAPI，供大家借鉴。</p><p>我们把项目划分为5个目录，分别为 api、extensions、settings、utils 和 tests。当然，大家可以对这些目录做适当的裁剪或修订。 api：项目框架核心，包含整体项目逻辑和路由视图，示例 myFastAPI 中有 shopdemo 和 websocketdemo 两个子项目，而在 shopdemo 子项目下有 goods 和 home 两个模块，其下有各自的路由视图，分开管理，并通过 api 包中的 <strong>init</strong>.py 创建的工厂模式生成应用对象统一注册使用。 extensions：包含项目依赖的一些扩展包，如日志管理。 settings：包含项目的配置文件，如测试环境配置、生产环境等。 utils：工具目录，一般用于存放我们抽象出来的公共类或根据业务场景抽象出来可复用的一些工具类。 tests：测试案例，项目代码质量检测的脚本，这部分主要包含我们开发过程中的一些测试案例，用于对我们的代码进行单元测试。</p><p>该项目实例是基于 pipenv 构建的，所以通过 Pipfile 和 Pipfile.lock 文件进行依赖的管理。在项目工程目录下，使用命令行执行命令 tree-FC，即可显示如下的项目树结构： ├── Pipfile ├── Pipfile.lock ├── README.md ├── api/ │ ├── <strong>init</strong>.py* # 创建工厂模式生成应用对象 │ ├── shopdemo/ # 子项目shopdemo │ │ ├── <strong>init</strong>.py* # 路由汇总，包括该子项目下所有模块的路由 │ │ ├── database.py* │ │ ├── goods/ # goods模块 │ │ │ ├── <strong>init</strong>.py* │ │ │ └── goods.py* # goods模块的路由视图 │ │ ├── home/ # home模块 │ │ │ ├── <strong>init</strong>.py* │ │ │ └── home.py* # home模块的路由视图 │ │ └── schemas.py* │ └── websocketdemo/ │ ├── <strong>init</strong>.py* │ └── chat.py* ├── extensions/ │ ├── <strong>init</strong>.py* │ └── logger.py* ├── main.py* #程序入口 ├── settings/ │ ├── <strong>init</strong>.py* │ └── development_config.py* ├── tests/ │ ├── <strong>init</strong>.py* │ └── test_home.py* └── utils/ ├── <strong>init</strong>.py* ├── custom_exc.py* └── response_code.py*</p>',7)]))}const m=s(n,[["render",i],["__file","41v5xrbn.html.vue"]]),g=JSON.parse('{"path":"/article/41v5xrbn.html","title":"FastAPI模块化","lang":"zh-CN","frontmatter":{"title":"FastAPI模块化","createTime":"2025/01/21 10:11:04","permalink":"/article/41v5xrbn.html","watermark":true},"headers":[],"readingTime":{"minutes":2.41,"words":722},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/fastapi/FastAPI模块化.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"8ea922","sort":10008,"name":"fastapi"}],"bulletin":false}');export{m as comp,g as data};
