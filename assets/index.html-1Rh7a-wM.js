import{_ as a,c as s,a as i,o as n}from"./app-CS9K37Kg.js";const l={};function t(d,e){return n(),s("div",null,e[0]||(e[0]=[i(`<h1 id="linux常用命令" tabindex="-1"><a class="header-anchor" href="#linux常用命令"><span>linux常用命令</span></a></h1><p><a href="https://www.cnblogs.com/banjinbaijiu/p/9140460.html" target="_blank" rel="noopener noreferrer">Linux中常用操作命令</a></p><h2 id="查看当前用户" tabindex="-1"><a class="header-anchor" href="#查看当前用户"><span>查看当前用户</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>whoami</span></span>
<span class="line"><span>lastlog</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>命令groups 查看当前用户bai所du属zhi组 [root@localhost xly]# groups</li></ul><p>root</p><ul><li>groups 用户（查看用户所属组）</li></ul><p>[root@localhost xly]# groups xly</p><p>xly : xly</p><ul><li>id 用户(查看用户所属组）</li></ul><p>[root@localhost xly]# id xly</p><p>uid=500(xly) gid=500(xly) groups=500(xly)</p><ul><li>直接查看组文件，cat /etc/group</li></ul><p>[root@localhost xly]# cat /etc/group</p><p>root❌0:</p><p>bin❌1:bin,daemon</p><p>daemon❌2:bin,daemon</p><p>sys❌3:bin,adm</p><p>adm❌4:adm,daemon</p><p>tty❌5:</p><p>disk❌6:</p><p>lp❌7:daemon</p><p>mem❌8:</p><p>kmem❌9:</p><p>xly❌500:</p><ul><li>命令：cat /etc/group|grep 组名，用于查找某个用户组</li></ul><h2 id="grep" tabindex="-1"><a class="header-anchor" href="#grep"><span>grep</span></a></h2><p><a href="https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856896.html" target="_blank" rel="noopener noreferrer">linux grep命令详解</a></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]</span></span>
<span class="line"><span>        [-e pattern] [-f file] [--binary-files=value] [--color=when]</span></span>
<span class="line"><span>        [--context[=num]] [--directories=action] [--label] [--line-buffered]</span></span>
<span class="line"><span>        [--null] [pattern] [file ...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[root@www ~]# grep [-acinv] [--color=auto] &#39;搜寻字符串&#39; filename 选项与参数： 使用grep -o &quot;xxx字符&quot;按行显示出所有的匹配结果 -a ：将 binary 文件以 text 文件的方式搜寻数据</p><p>-c ：计算找到 &#39;搜寻字符串&#39; 的行数，而不是次数，如果一样中出现两次 ‘搜寻字符串’ 计数为1， 而不是2 -i ：忽略大小写的不同，所以大小写视为相同 -n ：顺便输出行号 -v ：反向选择，亦即显示出没有 &#39;搜寻字符串&#39; 内容的那一行！ --color=auto ：可以将找到的关键词部分加上颜色的显示喔！</p><p>当前工作目录级数</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>pwd | grep --color &#39;\\/&#39; | grep -o &#39;\\/&#39; | grep -c &#39;\\/&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="pwd" tabindex="-1"><a class="header-anchor" href="#pwd"><span>pwd</span></a></h2><p>该命令的作用是<code>print name of current/working directory</code>，这才是此命令的真实含义，当前的工作目录。 <code>pwd</code>命令能够显示当前所处的路径。</p><p>shell脚本内使用pwd命令：</p><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">pwd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $path</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shell-中获取当前工作路径和命令文件所在绝对路径" tabindex="-1"><a class="header-anchor" href="#shell-中获取当前工作路径和命令文件所在绝对路径"><span>shell 中获取当前工作路径和命令文件所在绝对路径</span></a></h2><p><a href="https://blog.csdn.net/jiangshaoxin1987/article/details/102622983" target="_blank" rel="noopener noreferrer">Linux中shell脚本获取当前工作目录的方法</a></p><p>工作路径使用<code>pwd</code> 命令文件所在绝对路径使用</p><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">basepath</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=$(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \`</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">dirname</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> $0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> pwd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>dirname $0，取得当前执行的脚本文件的父目录 cd <code>dirname $0</code>，进入这个目录(切换当前工作目录) pwd，显示当前工作目录(cd执行后的) 由此，我们获得了当前正在执行的脚本的存放路径。</p><h2 id="pbcopy" tabindex="-1"><a class="header-anchor" href="#pbcopy"><span>pbcopy</span></a></h2><p><code>pbcopy &lt; id_rsa_github.pub</code>复制某个文件中的内容到粘贴板</p><h2 id="rm" tabindex="-1"><a class="header-anchor" href="#rm"><span>rm</span></a></h2><p><code>-r</code>: 删除文件夹 <code>-f</code>: 强制删除文件</p><h2 id="mkfile" tabindex="-1"><a class="header-anchor" href="#mkfile"><span>mkfile</span></a></h2><p><code>mkfile -n size[b|k|m|g]</code> 文件名：例如<code>mkfile -n 1m demo.rtf</code>就是在当前路径下创建一个<code>1m</code>大小名为<code>demo.rtf</code>文件。 <code>mkfile -n 1m demo1.rtf demo2.rtf demo3.rtf</code>:创建三个大小相同的文件。 <code>rm demo.rtf demo2.rtf</code>：删除两个文件。</p><h2 id="mkdir" tabindex="-1"><a class="header-anchor" href="#mkdir"><span>mkdir</span></a></h2><p><code>mkdir name</code>：创建名为<code>name</code>文件夹。 <code>rm -r demo/</code>:删除demo文件夹。</p><h2 id="cd" tabindex="-1"><a class="header-anchor" href="#cd"><span>cd</span></a></h2><ul><li>cd 进入用户主目录</li><li>cd ~ 进入用户主目录</li><li>cd - 返回进入此目录之前所在目录</li><li>cd .. 返回上一级目录</li><li>cd ../.. 返回上两级目录</li><li>cd !$ 把上个命令的参数作为 cd 参数使用</li><li>cd / 进入根目录</li><li>cd . 当前目录</li></ul><p>使用<code>cd ..</code>返回多级不是很方便，可以自定义别名</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>alias ...=&quot;cd ../..&quot;</span></span>
<span class="line"><span>alias ....=&quot;cd ../../..&quot;</span></span>
<span class="line"><span>alias .....=&quot;cd ../../../..&quot;</span></span>
<span class="line"><span>alias ......=&quot;cd ../../../../..&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误" tabindex="-1"><a class="header-anchor" href="#错误"><span>错误</span></a></h2><h3 id="zsh-error-export-54-not-valid-in-this-context" tabindex="-1"><a class="header-anchor" href="#zsh-error-export-54-not-valid-in-this-context"><span>zsh error: export:54: not valid in this context:</span></a></h3><h3 id="not-an-identifier" tabindex="-1"><a class="header-anchor" href="#not-an-identifier"><span>not an identifier</span></a></h3><p><code>=</code>两边不能有空格</p>`,58)]))}const r=a(l,[["render",t],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/linux/qo9pkv83/","title":"linux常用命令","lang":"zh-CN","frontmatter":{"title":"linux常用命令","createTime":"2025/01/21 15:34:16","permalink":"/linux/qo9pkv83/","watermark":true},"headers":[],"readingTime":{"minutes":2.86,"words":858},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/linux/linux常用命令.md","bulletin":false}');export{r as comp,o as data};
