import{_ as t,c as d,a as p,b as a,e,f as n,r as h,o as c,d as l}from"./app-CS9K37Kg.js";const o={};function r(k,s){const i=h("RouteLink");return c(),d("div",null,[s[3]||(s[3]=p(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p><code>GitHub Pages</code> 是直接从 <code>GitHub</code> 存储库托管的静态站点，但它们不仅仅是静态文件的集合。 通过利用 <code>Jekyll</code> 和 <code>Liquid</code> 等网站生成技术，开发人员可定义被处理为完整静态网站的动态模板。 每次将更改提交到与网站关联的源分支时，都会使用最新更新重新生成该更改，并自动将其发布到目标 <code>URL</code>。</p><h2 id="创建-github-pages" tabindex="-1"><a class="header-anchor" href="#创建-github-pages"><span>创建 GitHub Pages</span></a></h2><ol><li>登录<code>GitHub</code></li></ol><ul><li>如果没有账号可以创建<code>GitHub</code>账号后登录</li></ul><ol start="2"><li>创建库</li></ol><ul><li>仓库名命名为：<code>[username].github.io</code></li></ul><ol start="3"><li>提交文件到仓库</li></ol><ul><li>建打包好的静态网站提交到仓库中</li></ul><ol start="4"><li>测试</li></ol><ul><li>代码提交之后就可以通过 <code>https://[username].github.io</code> 来访了。</li></ul><p><strong>注意</strong>：默认情况下，<code>GitHub Pages</code> 站点在互联网上是公开可用的，即使站点的存储库是私有的或内部的。如果您的项目网站是从使用 GitHub 企业云的组织拥有的私有或内部存储库发布的，则可以管理该网站的访问控制。在具有托管用户的企业中，所有 <code>GitHub Pages</code> 网站都是私下发布的。否则，如果站点的存储库中有敏感数据，则可能需要在发布之前删除这些数据。</p><h2 id="配置-github-pages" tabindex="-1"><a class="header-anchor" href="#配置-github-pages"><span>配置 <code>GitHub Pages</code></span></a></h2><h3 id="配置发布分支" tabindex="-1"><a class="header-anchor" href="#配置发布分支"><span>配置发布分支</span></a></h3><p><code>[username].github.io</code>项目下<code>Settings</code>-&gt;<code>Pages</code>-&gt;<code>Build and deployment</code>-&gt;<code>Branch</code>配置分支，默认为<code>master</code>。</p><h3 id="自定义域名" tabindex="-1"><a class="header-anchor" href="#自定义域名"><span>自定义域名</span></a></h3><p><code>[username].github.io</code>项目下<code>Settings</code>-&gt;<code>Pages</code>-&gt;<code>Build and deployment</code>-&gt;<code>Custom domain</code>配置域名。</p><ol><li>购买一个域名</li><li>配置 <code>DNS</code>解析。域名购买成功并通过审核之后，就可以在域名购买的平台配置DNS的解析记录。通常我们使用的记录类型是 <code>CNAME</code>，它可以帮助我们将原本默认的域名<code>http://[username].github.io</code>指向我们购买的域名。主机记录处可以填写<code>www</code>或者<code>blog</code>，具体可以根据你的网站的用途来确定。</li><li>绑定到 <code>Github Pages</code> 在你的<code>Github Pages</code>仓库中，进入<code>Setting-Code and automation-Pages</code>, 在<code>Custom domain</code>中填写你在步骤2中配置好的域名，比如***.tech，点击<code>save，github</code>会花费一点时间做 <code>DNS check</code>，成功时你能看到成功的提示。记得勾选下面的<code>Enforce HTTPS</code>。</li></ol><h2 id="github-pages-构建和发布" tabindex="-1"><a class="header-anchor" href="#github-pages-构建和发布"><span><code>GitHub Pages</code> 构建和发布</span></a></h2><p><code>GitHub Pages</code>的构建和发布方式有多种。</p><h3 id="_1-手动更新仓库代码" tabindex="-1"><a class="header-anchor" href="#_1-手动更新仓库代码"><span>1. 手动更新仓库代码</span></a></h3><p>最简单的就是手动更新<code>[username].github.io</code>的代码</p><ul><li>本地<code>build</code>项目，上传打包的目录到<code>[username].github.io</code>中可以是主干和分支都可以，只需要和<code>GitHub Pages</code>配置相同就可以。</li></ul><h3 id="_2-半自动更新仓库代码" tabindex="-1"><a class="header-anchor" href="#_2-半自动更新仓库代码"><span>2. 半自动更新仓库代码</span></a></h3><p><strong>手动更新仓库代码</strong>中的<code>build</code>和<code>push</code>是可以通过脚本自动完成的。</p><p>创建一个<code>buildDeploy.sh</code>脚本，内容如下：</p><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">###</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # @Author: matiastang</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # @Date: 2022-11-28 23:01:01</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # @LastEditors: matiastang</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # @LastEditTime: 2023-02-02 19:20:24</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # @FilePath: /HulkPress/deploy.sh</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # @Description: 部署脚本</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">### </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 确保脚本抛出遇到的错误</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -e</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 生成静态文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docs:build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 进入生成的文件夹</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docs/.vuepress/dist</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 如果是发布到自定义域名</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># echo &#39;www.example.com&#39; &gt; CNAME</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> init</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -A</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Auto deploy from buildDeploy.sh</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> -</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则更新之后运行脚本实现更新。运行脚本也可不一定需要手动，也可以弄成自动</p><h3 id="_3-结合github-actions-自动构建和发布" tabindex="-1"><a class="header-anchor" href="#_3-结合github-actions-自动构建和发布"><span>3. 结合<code>GitHub Actions</code> 自动构建和发布</span></a></h3><p>发布或更新<code>GitHub Pages</code>的只是需要更新<code>[username].github.io</code>仓库下面配置的对应分支就行了。我们完全可以通过<code>GitHub Actions</code> 自动构建和发布。</p><p>我使用的是<code>VuePress</code>，所以创建了<code>.github/workfows/vuepress-deplou.yml</code></p><div class="language-yml line-numbers-mode" data-ext="yml" data-title="yml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> vueperss deploy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">push</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">jobs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  build-and-deploy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    runs-on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    steps</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      uses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> actions/checkout@master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> vueperss build and deploy</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> |</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        yarn install</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        yarn docs:build</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        cd docs/.vuepress/dist</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        git init</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        git config --global user.email \${{ secrets.MT_EMAIL }}</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        git config --global user.name \${{ secrets.MT_NAME }}</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        git add -A</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        git commit -m &#39;Auto deploy from Github Actions&#39;</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        git push -f https://\${{ secrets.MT_TOKEN }}@github.com/matiastang/matiastang.github.io master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面实现了在一个仓库中编写，然后再该仓库<code>push</code>时，自动<code>build</code>并将<code>build</code>的输出<code>dist</code>目录<code>push</code>到<code>[usename].github.io</code>仓库的<code>master</code>分支中。实现<code>GitHub Pages</code>的更新。用到了两个仓库。 其实也可以只使用<code>[usename].github.io</code>仓库，通过分支来区别修改分支和发布分支。看自己的策略，两种方式还是有点儿区别的。</p><p><strong>注意</strong>上面涉及到了<code>GitHub Actions</code>、<code>GitHub Token</code>和<code>gitHub actions secrets</code>可以参考如下链接：</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><p><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site" target="_blank" rel="noopener noreferrer">gitHub Pages</a></p>`,36)),a("p",null,[e(i,{to:"/github/ptv873ne/"},{default:n(()=>s[0]||(s[0]=[l("gitHub tokens")])),_:1})]),a("p",null,[e(i,{to:"/github/9f26um3n/"},{default:n(()=>s[1]||(s[1]=[l("gitHub actions secrets")])),_:1})]),a("p",null,[e(i,{to:"/github/sj4lt68r/"},{default:n(()=>s[2]||(s[2]=[l("gitHub actions")])),_:1})])])}const g=t(o,[["render",r],["__file","7oj1j32r.html.vue"]]),b=JSON.parse('{"path":"/github/7oj1j32r.html","title":"GitHub Pages","lang":"zh-CN","frontmatter":{"title":"GitHub Pages","createTime":"2025/01/02 15:56:36","permalink":"/github/7oj1j32r.html","watermark":true},"headers":[],"readingTime":{"minutes":3.96,"words":1187},"git":{"updatedTime":1755670488000,"contributors":[{"name":"唐道勇","username":"唐道勇","email":"matias@tangdaoyongdeMacBook-Pro.local","commits":1,"avatar":"https://avatars.githubusercontent.com/唐道勇?v=4","url":"https://github.com/唐道勇"}]},"filePathRelative":"notes/github/pages.md","bulletin":false}');export{g as comp,b as data};
